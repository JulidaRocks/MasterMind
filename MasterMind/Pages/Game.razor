@page "/game"

@using MasterMind.Data;
@inject GameMaster GameMaster

<h1>Mastermind</h1>

<p><button class="btn btn-primary" @onclick="StartGame">New Game</button></p>

@if (_ergebnis != null)
{
    <div class="alert alert-success" role="alert">
        @_ergebnis
    </div>
}

@if (_moves == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>1</th>
                <th>2</th>
                <th>3</th>
                <th>4</th>
                <th>5</th>
                <th>Actions</th>
                <th>E1</th>
                <th>E2</th>
                <th>E3</th>
                <th>E4</th>
                <th>E5</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < _moves.Count; i++)
            {
                var move = _moves[i];
                <tr>

                    @if (i == _moves.Count - 1)
                    {

                        @for (int j = 0; j < 5; j++)
                        {
                            <td><ColorSelect Number="@j" SelectedColor="@move.GuessedColors[j]" OnChangeEvent="AddSelectedColor" /></td>
                        }
                        <td><button class="btn btn-primary" @onclick="Evaluate">Evaluate</button></td>

                    }
                    else
                    {

                        @for (int j = 0; j < 5; j++)
                        {
                            <td><Peg Color=@move.GuessedColors[j].ToString() /></td>
                        }
                        <td></td>
                    }

                    @for (int k = 0; k < 5; k++)
                    {
                        <td><Peg Color=@move.MoveResult?.EvaluatedResultColors[k].ToString() /></td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IList<Move> _moves;
    private string _ergebnis;
    private Move _currentMove => _moves.LastOrDefault();

    protected override Task OnInitializedAsync()
    {
        _moves = GameMaster.GetMoves();
        return Task.CompletedTask;
    }

    public void StartGame()
    {
        Reset();
        _moves.Add(GameMaster.StartGame());
    }

    private void Reset()
    {
        _ergebnis = null;
        _moves.Clear();
    }

    public void Evaluate()
    {
        var spielzug = GameMaster.Evaluate(_moves.LastOrDefault().GuessedColors);
        if (spielzug == null)
        {
            _ergebnis = "Juhu, du hast gewonnen!";
            return;
        }
        _moves.Add(spielzug);
    }

    public void AddSelectedColor(KeyValuePair<int, GameColors> keyValuePair)
    {
        _currentMove.GuessedColors[keyValuePair.Key] = keyValuePair.Value;
    }
}
